- module search path: 
    import sys
    sys.path
    sys.path.append() # adding at the runtime

- Executing a Module as a Script:
    Use if __name__ == "__main__": to check if a module is being run as the main program.
    Wrap your multiprocessing code in an if __name__ == "__main__": block in your main script to ensure that it's only executed in the main process. This helps avoid issues with creating child processes during import.
    This approach ensures better process management with the operating system.

- Packages:
    A package is a set of modules.
    It provides a namespace.
    You can import a module from a package using from <package> import <module>.
    If only the package is imported, the subordinated modules are not automatically imported.
    Previously, an __init__.py file had to be located in a package (this may still be required in Django migrations), but it is no longer necessary.
        If only the package is imported, then __init__.py is executed.
        In __init__.py, you may specify which module to import in a package, e.g., from . import module1.

- Finding a Package:
    Even with relative imports, if the path is not registered in sys.path, then a package cannot be found.
    Use the following example to add a directory to sys.path:
        
        import sys, os
        sys.path.append(os.path.dirname(os.getcwd()))  # adding the parent directory to the path; the parent directory contains 'tools' package

        from tools import koreainvest_module

- '-m' option in python
    python -m enables to run a module (no need to put .py)
    (1) add directories to sys.path for use in import resolution
    (2) execute python code from the command line via modulename rather than filename 
    you can execute python code that contains relative imports from the module location

- Package in the pypi
    pip install <package>
    this package is different from the package of moudles described above (more close to distribution)
    there are certain rules to upload a package in pypi, then users can use the package through pip

- OAuth
    lets a service to use a user's information available in 3rd parties without using the user's credentials for the 3rd parties
    instead it uses access tokens

- TMUX
    sudo apt-get install tmux; probably already installed in Ubuntu
    enable virtualenv... then...
    tmux new -s <process_name>
    run code
    ctrl+b, d (detatch)

    tmux ls
    tmux attach -t <process_name>
    exit
    tmux kill-session -t <process_name>

- git 
    git add . <- . means current directory and subordinated directories
    git add -A <- adds all from base directory



### Note for operational setup ... 

- installations
    pip install -U finance-datareader
    pip install opendartreader 
    pip install pyarrow
    pip install scipy
    pip install mojito2
    pip install seaborn
    pip install plotly

- config file: be careful about the location and content

- in mojito module, change path to the token.dat for it to be in config... :should be adjusted according to relative directory (e.g., ../../config/.. or ../config/..)
    you may use koreainvest_module.py instead
    
- in fdr, for file \FinanceDataReader\krx\listing.py: 
    df_listing = pd.read_html(url, header=0, encoding='euc-kr')[0]  # Use 'euc-kr' encoding

- in OpenDartReader
    dart_finstate.py
    def finstate(...): 
        ...
        if 'message' in jo:
            if '초과' in jo['message']:
                print(jo)
                raise Exception('USAGE LIMIT REACHED...')
        # print(jo)  <- make this a comment 
        # print('전자공시의 재무데이터는 2015년 이후 데이터를 제공합니다') if bsns_year < 2015 else print()   <- make this a comment    
        ...
    
- in OpenDartReader    
    def list(api_key, corp_code='', start=None, end=None, kind='', kind_detail='', final=False):
        ...
        except ET.ParseError as e:
            jo = r.json()
            if jo['status'] != '000':
                pass
                # print(ValueError(r.text))   <- make this a comment 
        ...

- Add C:\Users\user\projects\trader\ or equivalent to environment variable for import to work.

- On Korean font setup for matplotlib: 
    * refer to https://unsolvedproblem.github.io/etc/2020/08/04/matplotlib_korean_recog.html
    * but, no need to install nanum / instead user malgun.ttf from windows/fonts
    * copy it into venv/.../matplotlib... 
    * modify (maynot be needed, if the font is installed in the system...) json file to add 'Malgun Gothic'